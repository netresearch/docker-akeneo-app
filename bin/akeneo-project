#!/bin/sh
set -e

# The following line is replaced from Dockerfile
# with the currently built Akeneo version:
unset AKENEO_VERSION

# The following line is replaced from Dockerfile
# with the currently built BOOTSTRAP_VERSION:
unset BOOTSTRAP_VERSION

INSTALL_DIRECTORY=$(pwd)
unset PACKAGES_DIRECTORY

HELP="
Akeneo Bootstrap Project Setup

This script sets up the sources for an Akeneo "$(if [ ! -z "$AKENEO_VERSION" ]; then echo "$AKENEO_VERSION "; fi)"Project

Usage:
  $0 command "$(if [ -z "$AKENEO_VERSION" ]; then echo "-v AKENEO_VERSION "; fi)"[options]

Commands:
  create   Create a project
  upgrade  Upgrade a project

Options:
  -h                     Display this help message"$(if [ -z "$AKENEO_VERSION" ]; then echo "
  -v=AKENEO_VERSION      The (new) Akeneo version to install (required)"; fi)"
  -b=BOOTSTRAP_VERSION   The version of netresearch/akeneo-bootstrap to
                         install
                         (default: '"$(if [ -z "$BOOTSTRAP_VERSION" ]; then echo "$BOOTSTRAP_VERSION"; else echo "AKENEO_VERSION || dev-master"; fi)"')
  -p=PACKAGES_DIRECTORY  Path to a local package directory
                         (no default but present kept on upgrade)
  -i=INSTALL_DIRECTORY   The installation directory
                         (default: '$(pwd)')
  -f                     When creating:
                           upgrade project when INSTALL_DIRECTORY is
                           not empty
                         When upgrading:
                           create project when no composer.json could
                           be found in INSTALL_DIRECTORY
  -s                     Exit with code 0 even on errors"

if [ "$1" = "create" ] || [ "$1" = "upgrade" ]; then
    COMMAND="$1"
    shift
fi

while getopts hfi:p:v:b: arg; do
  case $arg in
    h )  echo "$HELP" && exit 0 ;;
    f )  FORCE=true ;;
    i )  if [ "$OPTARG" != "" ]; then INSTALL_DIRECTORY="$OPTARG"; fi ;;
    p )  if [ "$OPTARG" != "" ]; then PACKAGES_DIRECTORY="$OPTARG"; fi ;;
    v )  if [ "$OPTARG" != "" ]; then AKENEO_VERSION="$OPTARG"; fi ;;
    b )  if [ "$OPTARG" != "" ]; then BOOTSTRAP_VERSION="$OPTARG"; fi ;;
    \? ) echo "Run $0 -h to show help" exit 2 ;;
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

if [ -z "$AKENEO_VERSION" ]; then
    echo "Missing option: -v"
    echo "Run $0 -h to show help"
    exit 1
fi
if [ -z "$BOOTSTRAP_VERSION" ]; then
    BOOTSTRAP_VERSION="$AKENEO_VERSION || dev-master"
fi

if [ -e "$INSTALL_DIRECTORY" ] && [ ! -d "$INSTALL_DIRECTORY" ]; then
    echo "$INSTALL_DIRECTORY is not a directory"
    exit 1
fi

if [ -f "$INSTALL_DIRECTORY/vendor/akeneo-build-done" ] && [ ! "$FORCE" ]; then
    echo "Project already built";
    echo "Run with -f to force rebuild";
    exit 0;
fi

if [ "$COMMAND" = "create" ]
then
    if [ -e "$INSTALL_DIRECTORY" ] && [ "$(ls -A $INSTALL_DIRECTORY)" ]
    then
        if [ "$FORCE" ]
        then
            COMMAND="upgrade"
        else
            echo "$INSTALL_DIRECTORY is not empty - run with -f to create/upgrade the project anyway"
            exit 1
        fi
    fi
else
    if [ "$COMMAND" != "upgrade" ]
    then
        echo "Missing or invalid command"
        echo "Run $0 -h to show help"
        exit 1
    fi
    if [ ! -f "$INSTALL_DIRECTORY/composer.json" ]
    then
        echo "No composer.json found - run with -f to upgrade/create the project anyway"
        exit 1
    fi
fi

mkdir -p "/tmp/akeneo-pim-community-dev"
cd "/tmp/akeneo-pim-community-dev"
if [ ! -f "./composer.json" ]; then
    echo "Fetching akeneo/pim-community-dev (v${AKENEO_VERSION})..."
    curl -sL https://github.com/akeneo/pim-community-dev/archive/v${AKENEO_VERSION}.tar.gz | tar -xz --strip-components=1
fi

AKENEO_VERSION="$AKENEO_VERSION" php << 'PHP'
    <?php
    $json = json_decode(file_get_contents("composer.json"), true);
    $json = array_merge(["name" => $json["name"], "version" => getenv("AKENEO_VERSION")], $json);
    file_put_contents("composer.json", json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . "\n");
    ?>
PHP

mkdir -p "$INSTALL_DIRECTORY"
cd "$INSTALL_DIRECTORY"
if [ "$COMMAND" = "create" ];
then
    echo "Creating project..."
    composer create-project --no-install akeneo/pim-community-standard "$INSTALL_DIRECTORY" "$AKENEO_VERSION"
    composer config preferred-install 'dist'
    composer config extra.symfony-assets-install 'copy'
else
    echo "Upgrading project"
    TMP_DIRECTORY="/tmp/akeneo-pim-community-standard"
    rm -rf "$TMP_DIRECTORY"
    composer create-project --no-install akeneo/pim-community-standard "$TMP_DIRECTORY" "$AKENEO_VERSION"
    cd "$TMP_DIRECTORY"
    if [ -f "$INSTALL_DIRECTORY/composer.json" ]; then
INSTALL_DIRECTORY="$INSTALL_DIRECTORY" php << 'PHP'
    <?php
    $origJson = json_decode(file_get_contents(getenv('INSTALL_DIRECTORY') . "/composer.json"), true);
    $json = json_decode(file_get_contents("composer.json"), true);
    unset($origJson["require"]["doctrine/mongodb-odm-bundle"]);
    unset($origJson["require"]["netresearch/akeneo-bootstrap"]);
    $json["require"] = array_merge($origJson["require"], $json["require"]);
    $json["tmp-repositories"] = (array) $origJson["repositories"];
    file_put_contents("composer.json", json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . "\n");
    ?>
PHP
    fi
fi

PACKAGES_DIRECTORY="$PACKAGES_DIRECTORY" php << 'PHP'
    <?php
    $json = json_decode(file_get_contents("composer.json"), true);
    $json["repositories"] = array_merge((array) $json["tmp-repositories"], [
        "akeneo" => [
            "type" => "path",
            "url" => "/tmp/akeneo-pim-community-dev",
            "options" => ["symlink" => false]
        ]
    ]);
    if ($packagesDirectory = getenv("PACKAGES_DIRECTORY")) {
        $json["repositories"]["local"] = [
            "type" => "path",
            "url" => "$packagesDirectory/*/*"
        ];
    }
    unset($json["tmp-repositories"]);

    $json["extra"]["incenteev-parameters"] = "Handled/replaced by netresearch/akeneo-bootstrap";
    file_put_contents("composer.json", json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . "\n");
    ?>
PHP

if [ "$COMMAND" = "upgrade" ]; then
    echo "Copying new files..."
    cp -r "$TMP_DIRECTORY"/* "$INSTALL_DIRECTORY/"
    echo "Removing obsolete files..."
    cd "$INSTALL_DIRECTORY"
    for DIR in $(find . -not -path "./vendor" -not -path "./vendor/*" -type d  -depth | cut -c 3-)
    do
        if [ ! -e "$TMP_DIRECTORY/$DIR" ]
        then
            echo "Removing $INSTALL_DIRECTORY/$DIR"
            rm -rf "$INSTALL_DIRECTORY/$DIR"
        fi
    done
    for FILE in $(find . -not -path "./vendor" -not -path "./vendor/*" -not -type d | cut -c 3-)
    do
        if [ ! -e "$TMP_DIRECTORY/$FILE" ] && [ "$FILE" != "composer.lock" ]
        then
            echo "Removing $INSTALL_DIRECTORY/$FILE"
            rm -f "$INSTALL_DIRECTORY/$FILE"
        fi
    done
    rm -rf "$TMP_DIRECTORY"
fi

echo "Installing..."
composer require "doctrine/mongodb-odm-bundle" "netresearch/akeneo-bootstrap:$BOOTSTRAP_VERSION"

chmod +x ./app/console

php << 'PHP'
    <?php
    $json = json_decode(file_get_contents("composer.json"), true);
    unset($json["repositories"]["akeneo"]);
    file_put_contents("composer.json", json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) . "\n");
    ?>
PHP

touch ./vendor/akeneo-build-done

rm -rf /tmp/akeneo-pim-community-dev