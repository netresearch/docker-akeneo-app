<?php

namespace Netresearch\AkeneoBootstrap\Bootstrap;


use Symfony\Component\Yaml\Yaml;

class GenerateParameters extends BootstrapAbstract
{
    protected $parameters = array(
        'database_driver' => 'pdo_mysql',
        'database_host' => 'localhost',
        'database_port' => '~',
        'database_name' => 'akeneo_pim',
        'database_user' => 'akeneo_pim',
        'database_password' => 'akeneo_pim',
        'locale' => 'en',
        'secret',
        'pim_catalog_product_storage_driver',
        'mongodb_server',
        'mongodb_database',
        'upload_dir' => '/var/opt/akeneo/uploads/product',
        'catalog_storage_dir' => '/var/opt/akeneo/file_storage/catalog',
        'archive_dir' => '/var/opt/akeneo/archive'
    );
    
    public function getMessage()
    {
        return 'Generating parameters.yml';
    }

    public function run()
    {
        $lines = [
            '# Autogenerated by ' . __CLASS__,
            'parameters:'
        ];
        $path = $this->getKernel()->getRootDir() . '/config/parameters.yml';
        $existing = file_exists($path) ? Yaml::parse(file_get_contents($path))['parameters'] : [];
        $new = [];
        foreach ($this->parameters as $parameter => $default) {
            if (is_numeric($parameter)) {
                $parameter = $default;
                $default = null;
            }
            $value = getenv(strtoupper($parameter));
            if ($value === false) {
                if ($default) {
                    $value = $default;
                } elseif ($parameter === 'secret') {
                    if (!empty($existing['secret']) && $existing['secret'] !== 'ThisTokenIsNotSoSecretChangeIt') {
                        $value = $existing['secret'];
                    } else {
                        $value = uniqid();
                    }
                } else {
                    continue;
                }
            }
            $new[$parameter] = $value;
        }

        ksort($existing);
        ksort($new);
        $existing = Yaml::dump(['parameters' => $existing]);
        $new = Yaml::dump(['parameters' => $new]);
        if ($existing !== $new) {
            $this->fs->dumpFile($path, '# Autogenerated by ' . __CLASS__ . "\n" . $new);
            $this->isCacheClearRequired(true);
        }
    }
}