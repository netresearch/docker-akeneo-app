<?php

namespace Netresearch\AkeneoBootstrap\Bootstrap;

use Netresearch\AkeneoBootstrap\Util\Composer;

class GenerateKernel extends BootstrapAbstract
{
    public function getMessage()
    {
        return 'Generating AppKernel.php';
    }

    public function run()
    {
        $vendorDir = Composer::getVendorDir();
        $rootDir = realpath($vendorDir . '/../app');

        $this->createPimKernel($rootDir, $vendorDir);

        $this->createAppKernel($rootDir);

        require_once $rootDir . '/AppKernel.php';

        $kernel = new \AppKernel('prod', false);
        $this->setKernel($kernel);

        EnsureChownDirectories::registerDirectories([dirname($kernel->getCacheDir()), $kernel->getLogDir()]);
    }

    /**
     * @param string $rootDir
     * @param string $vendorDir
     */
    protected function createPimKernel($rootDir, $vendorDir)
    {
        $this->fs->dumpFile(
            $rootDir . '/PimKernel.php',
            str_replace(
                'class AppKernel extends Kernel',
                'class PimKernel extends Kernel',
                file_get_contents(
                    $vendorDir . '/akeneo/pim-community-dev/app/AppKernel.php'
                )
            )
        );
    }

    /**
     * @param string $rootDir
     */
    protected function createAppKernel($rootDir)
    {
        $this->fs->dumpFile(
            $rootDir . '/AppKernel.php',
            implode("\n", [
                '<?php',
                '// Autogenerated by ' . __CLASS__,
                '',
                'require_once __DIR__ . \'/PimKernel.php\';',
                '',
                'class AppKernel extends PimKernel {',
                '    protected function registerProjectBundles() {',
                call_user_func(function() {
                    $bundlesByEnv = $this->getRequiredBundles();
                    $allBundles = $bundlesByEnv['all'];
                    unset($bundlesByEnv['all']);
                    $renderBundleArray = function ($bundles, $indention) {
                        if (!count($bundles)) {
                            return '[]';
                        }
                        return "[\n$indention    new "
                            . implode("(),\n$indention    new ", $bundles)
                            . "()\n$indention]";
                    };
                    if ($bundlesByEnv) {
                        $str = '        $bundles = ' . $renderBundleArray($allBundles, '        '). ';';
                        $str .= "\n" . '        switch ($this->environment) {';
                        foreach ($bundlesByEnv as $env => $bundles) {
                            $str .= "\n            case '$env':\n"
                                . '                return array_merge($bundles, ' . $renderBundleArray(
                                    $bundles, '                '
                                ) . ");";
                        }
                        $str .= "\n        }\n";
                        $str .= '        return $bundles;';
                    } else {
                        $str = '        return ' . $renderBundleArray($allBundles, '        ') . ';';
                    }
                    return $str;
                }),
                '    }',
                '    public function getCacheDir() {',
                '        return (getenv(\'CACHE_DIR\') ?: \'/var/cache/akeneo\') . \'/\' . $this->environment;',
                '    }',
                '    public function getLogDir() {',
                '        return getenv(\'LOG_DIR\') ?: \'/var/log/akeneo\';',
                '    }',
                '}'
            ])
        );
    }

    protected function getRequiredBundles()
    {
        $bundles = ['all' => []];
        if (getenv('MONGODB_SERVER')) {
            $bundles['all'][] = 'Doctrine\\Bundle\\MongoDBBundle\\DoctrineMongoDBBundle';
        }

        foreach (Composer::getAkeneoBootstrapPackageExtras() as $package => $extra) {
            if (isset($extra['bundles'])) {
                foreach ($extra['bundles'] as $i => $bundle) {
                    $msg = "<error>Could not activate bundle $i for $package:</error>\n";
                    if (!is_array($bundle)) {
                        $this->output->writeln("$msg - wrong format");
                        continue;
                    }
                    if (!isset($bundle['class'])) {
                        $this->output->writeln("$msg - class missing");
                        continue;
                    }
                    $class = '\\' . ltrim($bundle['class'], '\\');
                    if (!class_exists($class)) {
                        $this->output->writeln("$msg - class $class could not be loaded");
                        continue;
                    }
                    if (!in_array('Symfony\\Component\\HttpKernel\\Bundle\\BundleInterface', class_implements($class))) {
                        $this->output->writeln("$msg - class $class is not a bundle");
                        continue;
                    }
                    if (in_array($class, $bundles['all'])) {
                        continue;
                    }
                    $envs = isset($bundle['env']) ? $bundle['env'] : ['all'];
                    if (is_string($envs)) {
                        $envs = explode(',', $envs);
                    }
                    if (in_array('all', $envs)) {
                        $envs = ['all'];
                        foreach ($bundles as $env => $classes) {
                            $bundles[$env] = array_diff($classes, [$class]);
                        }
                    }
                    foreach ($envs as $env) {
                        if (!array_key_exists($env, $bundles)) {
                            $bundles[$env] = [$class];
                        } elseif (!in_array($class, $bundles[$env])) {
                            $bundles[$env][] = $class;
                        }
                    }
                }
            }
        }

        return $bundles;
    }
}